<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-02-09T15:53:59+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Platform Engineer</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description. Windt.</subtitle><entry><title type="html">Create certificates at Kubernetes using Hetzner DNS</title><link href="http://localhost:4000/kubernetes/certificates/hetzner/letsencrypt/2024/02/08/handling-certificates-hetzner-letsencrypt.html" rel="alternate" type="text/html" title="Create certificates at Kubernetes using Hetzner DNS" /><published>2024-02-08T08:33:12+01:00</published><updated>2024-02-08T08:33:12+01:00</updated><id>http://localhost:4000/kubernetes/certificates/hetzner/letsencrypt/2024/02/08/handling-certificates-hetzner-letsencrypt</id><content type="html" xml:base="http://localhost:4000/kubernetes/certificates/hetzner/letsencrypt/2024/02/08/handling-certificates-hetzner-letsencrypt.html">&lt;p&gt;Let’s talk a bit about managing certificates automatically at our Kubernetes cluster.
In this example we’ll use a Kubernetes cluster at MicroK8s, we’ll use Hetzner DNS servers and Letsencrypt.&lt;/p&gt;

&lt;p&gt;Currently there is not a lot running at this Kubernetes cluster yet, it’s almost empty. I only installed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Traefik Proxy&lt;/code&gt; on it and I want to expose the Traefik dashboard. Hence I need certificates because I only want secure traffic, even when it’s on my own local network.&lt;/p&gt;

&lt;p&gt;In order to automatically create/use certificates using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Letsencrypt&lt;/code&gt; at your Kubernetes cluster, do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install cert-manager at your cluster&lt;/li&gt;
  &lt;li&gt;Install Hetzner webook in case you use Hetzner DNS API:&lt;br /&gt;
&lt;a href=&quot;https://github.com/mecodia/cert-manager-webhook-hetzner&quot; target=&quot;_new&quot;&gt;https://github.com/mecodia/cert-manager-webhook-hetzner&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;sth&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="kubernetes" /><category term="certificates" /><category term="hetzner" /><category term="letsencrypt" /><summary type="html">Let’s talk a bit about managing certificates automatically at our Kubernetes cluster. In this example we’ll use a Kubernetes cluster at MicroK8s, we’ll use Hetzner DNS servers and Letsencrypt.</summary></entry><entry><title type="html">Create a certificate at Kubernetes</title><link href="http://localhost:4000/kubernetes/certificates/letsencrypt/2024/02/08/Kubernetes-create-certificate.html" rel="alternate" type="text/html" title="Create a certificate at Kubernetes" /><published>2024-02-08T07:03:52+01:00</published><updated>2024-02-08T07:03:52+01:00</updated><id>http://localhost:4000/kubernetes/certificates/letsencrypt/2024/02/08/Kubernetes%20create%20certificate</id><content type="html" xml:base="http://localhost:4000/kubernetes/certificates/letsencrypt/2024/02/08/Kubernetes-create-certificate.html">&lt;p&gt;kubectl apply the file below (of course after modifying to your needs)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cert-manager.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Certificate&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;traefik-2-cert-prod&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;traefik&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;commonName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;traefik-2.home.windjuh.de&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dnsNames&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;traefik-2.home.windjuh.de&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;whoami-2.home.windjuh.de&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;issuerRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterIssuer&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;letsencrypt-production&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;secretName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;traefik-2-cert-prod&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can follow live using k9s the creation of your certiicate&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/cert-creation-k9s.png&quot;&gt;&lt;img src=&quot;/images/cert-creation-k9s.png&quot; alt=&quot;certificate creation k9s&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="kubernetes" /><category term="certificates" /><category term="letsencrypt" /><summary type="html">kubectl apply the file below (of course after modifying to your needs)</summary></entry><entry><title type="html">Create Letsencrypt issuer</title><link href="http://localhost:4000/kubernetes/certificates/letsencrypt/2024/02/08/create-issuer.html" rel="alternate" type="text/html" title="Create Letsencrypt issuer" /><published>2024-02-08T07:03:52+01:00</published><updated>2024-02-08T07:03:52+01:00</updated><id>http://localhost:4000/kubernetes/certificates/letsencrypt/2024/02/08/create-issuer</id><content type="html" xml:base="http://localhost:4000/kubernetes/certificates/letsencrypt/2024/02/08/create-issuer.html">&lt;p&gt;Apply the file below.&lt;br /&gt;
Note that I provide TWO issuers, one for Letsencrypt staging and one for Letsencrypt production. You’ll use them both anyway.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cert-manager.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterIssuer&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;letsencrypt-staging&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;acme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The ACME server URL (attention, this is the staging one!)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://acme-staging-v02.api.letsencrypt.org/directory&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Email address used for ACME registration&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;example@example.com&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# REPLACE THIS WITH YOUR EMAIL!!!&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Name of a secret used to store the ACME account private key&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;privateKeySecretRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;letsencrypt-staging-account-key&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;solvers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dns01&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;webhook&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;groupName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dns.hetzner.cloud&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;solverName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hetzner&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;APIKey&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cert-manager.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterIssuer&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;letsencrypt-production&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;acme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The ACME server URL&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://acme-v02.api.letsencrypt.org/directory&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Email address used for ACME registration&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;example@example.com&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# REPLACE THIS WITH YOUR EMAIL!!!&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Name of a secret used to store the ACME account private key&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;privateKeySecretRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;letsencrypt-production-account-key&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;solvers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;dns01&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;webhook&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;groupName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dns.hetzner.cloud&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;solverName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hetzner&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;APIKey&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;/span&gt;        &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll see the clusterissuers in your cluster&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/clusterissuer-k9s.png&quot;&gt;&lt;img src=&quot;/images/clusterissuer-k9s.png&quot; alt=&quot;cluster issuers k9s&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="kubernetes" /><category term="certificates" /><category term="letsencrypt" /><summary type="html">Apply the file below. Note that I provide TWO issuers, one for Letsencrypt staging and one for Letsencrypt production. You’ll use them both anyway.</summary></entry><entry><title type="html">Install cert manager at Kubernetes/MicroK8s</title><link href="http://localhost:4000/kubernetes/certificates/letsencrypt/2024/02/08/install-cert-manager.html" rel="alternate" type="text/html" title="Install cert manager at Kubernetes/MicroK8s" /><published>2024-02-08T07:03:52+01:00</published><updated>2024-02-08T07:03:52+01:00</updated><id>http://localhost:4000/kubernetes/certificates/letsencrypt/2024/02/08/install-cert-manager</id><content type="html" xml:base="http://localhost:4000/kubernetes/certificates/letsencrypt/2024/02/08/install-cert-manager.html">&lt;p&gt;&lt;a href=&quot;https://cert-manager.io/docs/installation/&quot; target=&quot;_new&quot;&gt;https://cert-manager.io/docs/installation/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;microk8s &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;cert-manager&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;output&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;chris@kube-2:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;microk8s &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;cert-manager
Infer repository core &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;addon cert-manager
Enable DNS addon
Infer repository core &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;addon dns
Addon core/dns is already enabled
Enabling cert-manager
namespace/cert-manager created
customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created
serviceaccount/cert-manager-cainjector created
serviceaccount/cert-manager created
serviceaccount/cert-manager-webhook created
configmap/cert-manager-webhook created
clusterrole.rbac.authorization.k8s.io/cert-manager-cainjector created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-issuers created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-certificates created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-orders created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-challenges created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created
clusterrole.rbac.authorization.k8s.io/cert-manager-view created
clusterrole.rbac.authorization.k8s.io/cert-manager-edit created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-approve:cert-manager-io created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-certificatesigningrequests created
clusterrole.rbac.authorization.k8s.io/cert-manager-webhook:subjectaccessreviews created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-cainjector created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-issuers created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-certificates created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-orders created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-challenges created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-approve:cert-manager-io created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-certificatesigningrequests created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-webhook:subjectaccessreviews created
role.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created
role.rbac.authorization.k8s.io/cert-manager:leaderelection created
role.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created
rolebinding.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created
rolebinding.rbac.authorization.k8s.io/cert-manager:leaderelection created
rolebinding.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created
service/cert-manager created
service/cert-manager-webhook created
deployment.apps/cert-manager-cainjector created
deployment.apps/cert-manager created
deployment.apps/cert-manager-webhook created
mutatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created
validatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created
Waiting &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;cert-manager to be ready.
..ready
Enabled cert-manager

&lt;span class=&quot;o&quot;&gt;===========================&lt;/span&gt;

Cert-manager is installed. As a next step, try creating a ClusterIssuer
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;Let&lt;span class=&quot;s1&quot;&gt;&apos;s Encrypt by creating the following resource:

$ microk8s kubectl apply -f - &amp;lt;&amp;lt;EOF
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt
spec:
  acme:
    # You must replace this email address with your own.
    # Let&apos;&lt;/span&gt;s Encrypt will use this to contact you about expiring
    &lt;span class=&quot;c&quot;&gt;# certificates, and issues related to your account.&lt;/span&gt;
    email: me@example.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      &lt;span class=&quot;c&quot;&gt;# Secret resource that will be used to store the account&apos;s private key.&lt;/span&gt;
      name: letsencrypt-account-key
    &lt;span class=&quot;c&quot;&gt;# Add a single challenge solver, HTTP01 using nginx&lt;/span&gt;
    solvers:
    - http01:
        ingress:
          class: public
EOF

Then, you can create an ingress to expose &lt;span class=&quot;s1&quot;&gt;&apos;my-service:80&apos;&lt;/span&gt; on &lt;span class=&quot;s1&quot;&gt;&apos;https://my-service.example.com&apos;&lt;/span&gt; with:

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;microk8s &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;ingress
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;microk8s kubectl create ingress my-ingress &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--annotation&lt;/span&gt; cert-manager.io/cluster-issuer&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;letsencrypt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--rule&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;my-service.example.com/*=my-service:80,tls=my-service-tls&apos;&lt;/span&gt;

chris@kube-2:~&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll see an additional namespace and some pods&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/cert-manager-k9s.png&quot;&gt;&lt;img src=&quot;/images/cert-manager-k9s.png&quot; alt=&quot;cert-manager k9s&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="kubernetes" /><category term="certificates" /><category term="letsencrypt" /><summary type="html">https://cert-manager.io/docs/installation/</summary></entry><entry><title type="html">Install Hetzner webhook</title><link href="http://localhost:4000/kubernetes/certificates/letsencrypt/hetzner/2024/02/08/install-hetzner-webhook.html" rel="alternate" type="text/html" title="Install Hetzner webhook" /><published>2024-02-08T07:03:52+01:00</published><updated>2024-02-08T07:03:52+01:00</updated><id>http://localhost:4000/kubernetes/certificates/letsencrypt/hetzner/2024/02/08/install-hetzner-webhook</id><content type="html" xml:base="http://localhost:4000/kubernetes/certificates/letsencrypt/hetzner/2024/02/08/install-hetzner-webhook.html">&lt;p&gt;Install Hetzner webook in case you use Hetzner DNS API:&lt;br /&gt;
&lt;a href=&quot;https://github.com/mecodia/cert-manager-webhook-hetzner&quot; target=&quot;_new&quot;&gt;https://github.com/mecodia/cert-manager-webhook-hetzner&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;in short:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/mecodia/cert-manager-webhook-hetzner.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;cert-manager-webhook-hetzner/
helm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--namespace&lt;/span&gt; kube-system cert-manager-webhook-hetzner ./charts/cert-manager-webhook-hetzner&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;output&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;chris@kube-2:~/projects&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/mecodia/cert-manager-webhook-hetzner.git
Cloning into &lt;span class=&quot;s1&quot;&gt;&apos;cert-manager-webhook-hetzner&apos;&lt;/span&gt;...
remote: Enumerating objects: 435, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
remote: Counting objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;28/28&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
remote: Compressing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;23/23&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
remote: Total 435 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, reused 19 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, pack-reused 407
Receiving objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;435/435&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 213.72 KiB | 1.87 MiB/s, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Resolving deltas: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;199/199&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
chris@kube-2:~/projects&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;cert-manager-webhook-hetzner/
chris@kube-2:~/projects/cert-manager-webhook-hetzner&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;helm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--namespace&lt;/span&gt; kube-system cert-manager-webhook-hetzner ./charts/cert-manager-webhook-hetzner
NAME: cert-manager-webhook-hetzner
LAST DEPLOYED: Fri Feb  9 13:22:59 2024
NAMESPACE: kube-system
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
It&lt;span class=&quot;s1&quot;&gt;&apos;s running!
chris@kube-2:~/projects/cert-manager-webhook-hetzner$&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll see an additional pod in namespace kube-system&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/hetzner-webhook-k9s.png&quot;&gt;&lt;img src=&quot;/images/hetzner-webhook-k9s.png&quot; alt=&quot;hetzner-webhook k9s&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To uninstall the webhook:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;helm uninstall &lt;span class=&quot;nt&quot;&gt;--namespace&lt;/span&gt; kube-system cert-manager-webhook-hetzner&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><category term="kubernetes" /><category term="certificates" /><category term="letsencrypt" /><category term="hetzner" /><summary type="html">Install Hetzner webook in case you use Hetzner DNS API: https://github.com/mecodia/cert-manager-webhook-hetzner</summary></entry><entry><title type="html">How to connect to Kubernetes remotely</title><link href="http://localhost:4000/kubernetes/basics/2024/02/07/connect-to-kubernetes-remotely.html" rel="alternate" type="text/html" title="How to connect to Kubernetes remotely" /><published>2024-02-07T14:12:44+01:00</published><updated>2024-02-07T14:12:44+01:00</updated><id>http://localhost:4000/kubernetes/basics/2024/02/07/connect-to-kubernetes-remotely</id><content type="html" xml:base="http://localhost:4000/kubernetes/basics/2024/02/07/connect-to-kubernetes-remotely.html">&lt;p&gt;I like to use my laptop, Windows machine and/or MacBook, to connect my remote Kubernetes.
To do so, we need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; (stating the obvious) and I really really like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k9s&lt;/code&gt;.&lt;/p&gt;</content><author><name></name></author><category term="kubernetes" /><category term="basics" /><summary type="html">I like to use my laptop, Windows machine and/or MacBook, to connect my remote Kubernetes. To do so, we need kubectl (stating the obvious) and I really really like k9s.</summary></entry><entry><title type="html">Create a basic Kubernetes playground</title><link href="http://localhost:4000/kubernetes/basics/2024/02/07/basic-kubernetes-playground.html" rel="alternate" type="text/html" title="Create a basic Kubernetes playground" /><published>2024-02-07T10:46:42+01:00</published><updated>2024-02-07T10:46:42+01:00</updated><id>http://localhost:4000/kubernetes/basics/2024/02/07/basic-kubernetes-playground</id><content type="html" xml:base="http://localhost:4000/kubernetes/basics/2024/02/07/basic-kubernetes-playground.html">&lt;p&gt;This article assumes you have an operational instance of &lt;a href=&quot;https://microk8s.io/&quot; target=&quot;_new&quot;&gt;MicroK8s&lt;/a&gt; installed somewhere at some server.
You can also install it locally of course, it all depends how you personally like to work.&lt;/p&gt;

&lt;p&gt;I installed an Ubuntu server on a virtual machine at my network and selected to install MicroK8s during the installation of my server.
Once installed, it requires your user to be a member of the microk8s group. This info can be found at &lt;a href=&quot;https://microk8s.io/docs/getting-started&quot; target=&quot;_new&quot;&gt;https://microk8s.io/docs/getting-started&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-G&lt;/span&gt; microk8s &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt; ~/.kube
su - &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;now run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;microk8s status&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and you’ll get something like this&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/microk8s-status.png&quot;&gt;&lt;img src=&quot;/images/microk8s-status.png&quot; alt=&quot;microk8s status&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You’ll see currently only 4 addons are enabled by default. When you really start using this playground, you’ll notice need more. In the screenshot below you can see the status of my other server which I’m using for quite some time and which has all addons enabled I currently need.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/microk8s-status-addons.png&quot;&gt;&lt;img src=&quot;/images/microk8s-status-addons.png&quot; alt=&quot;microk8s status&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To enable them, type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;microk8s &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;cert-manager
microk8s &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;dashboard
microk8s &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;hostpath-storage
microk8s &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;ingress
microk8s &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;metallb
microk8s &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;metrics-server
microk8s &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;rbac
microk8s &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;storage&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You now have a working, useable Kubernetes environment to play arround.&lt;/p&gt;</content><author><name></name></author><category term="kubernetes" /><category term="basics" /><summary type="html">This article assumes you have an operational instance of MicroK8s installed somewhere at some server. You can also install it locally of course, it all depends how you personally like to work.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2023/12/22/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2023-12-22T18:46:42+01:00</published><updated>2023-12-22T18:46:42+01:00</updated><id>http://localhost:4000/jekyll/update/2023/12/22/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/12/22/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Tom&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &apos;Hi, Tom&apos; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>